<?php

namespace Desarrolla2\Bundle\BlogBundle\Document\Repository;


use \Desarrolla2\Bundle\BlogBundle\Document\Post;
use \Desarrolla2\Bundle\BlogBundle\Document\Tag;
use Desarrolla2\Bundle\BlogBundle\Model\PostStatus;
use \DateTime;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ODM. Add your own custom
 * repository methods below.
 */
class PostRepository extends DocumentRepository
{

    const POST_PER_PAGE = 6;

    /**
     * @param array $ids
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGetByIds(array $ids)
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb->field('status')->equals(PostStatus::PUBLISHED);

        $or = [];

        foreach ($ids as $id) {
            $or[] = $qb->field('$id')->equals($id);
        }

        $qb->addOr($or);

        return $qb;
    }

    /**
     * @param array $ids
     *
     * @return array
     */
    public function getByIds(array $ids)
    {
        if (!count($ids)) {
            return array();
        }

        return $this->getQueryForGetByIds($ids)
            ->getQuery()->execute()
            ;
    }

    /**
     *
     * @param string $slug
     *
     * @return \Desarrolla2\Bundle\BlogBundle\Document\Post
     */
    public function getOneBySlug($slug)
    {
        return $this->findOneBy(['slug' => $slug]);
    }

    /**
     *
     * @param \Desarrolla2\Bundle\BlogBundle\Document\Tag $tag
     * @param int                                       $limit
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getByTag(Tag $tag, $limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;
        $query = $this->getQueryForGetByTag($tag, $limit)
            ->limit($limit)
        ;

        return $query->getQuery()->execute();
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function get($limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;
        $query = $this->getQueryForGet($limit)
            ->limit($limit)
        ;

        return $query->getQuery()->execute();
    }

    /**
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGet()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->field('status')->equals(PostStatus::PUBLISHED);
        $qb->sort([
            'promotion' => 'DESC',
            'publishedAt' => 'DESC'
        ])
        ;

        return $qb;
    }

    /**
     *
     * @param string $slug
     *
     * @return array
     */
    public function getByTagSlug($slug = '')
    {
        $query = $this->getQueryForGetByTagSlug($slug);

        return $query->getQuery()->execute();
    }

    /**
     *
     * @param \Desarrolla2\Bundle\BlogBundle\Document\Tag $tag
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGetByTag(Tag $tag)
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->field('status')->equals(PostStatus::PUBLISHED);
        $qb->field('tags.slug')->equals($tag->getSlug());
        $qb->sort('publishedAt', 'DESC');

        return $qb;
    }

    /**
     *
     * @param string $slug
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGetByTagSlug($slug = '')
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb->field('status')->equals(PostStatus::PUBLISHED);
        $qb->field('tags.slug')->equals($slug);

        return $qb;
    }

    /**
     *
     * @param \Desarrolla2\Bundle\BlogBundle\Document\Post $post
     * @param int                                        $limit
     *
     * @return array
     */
    public function getLatestRelated(Post $post, $limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->field('status')->equals(PostStatus::PUBLISHED);
        $qb->field('tags.posts.$id')->equals($post->getId());
        $qb->sort('publishedAt', 'DESC');
        $qb->limit($limit);

        $related = $qb->getQuery()->execute();
        if (count($related)) {
            return $related;
        } else {
            return $this->getLatest($limit);
        }
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function getLatest($limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;

        return $this->get($limit);
    }

    /**
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryBuilderForFilter()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb->sort('createdAt', 'DESC');

        return $qb;
    }

    /**
     *
     * @return int
     */
    public function count()
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()->getQuery()->execute()->count();
    }

    /**
     *
     * @return int
     */
    public function countPublished()
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()
            ->field('status')->equals(PostStatus::PUBLISHED)
            ->getQuery()->execute()->count()
            ;
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function getUnPublished($limit = 50)
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder()
            ->field('status')->notEqual(PostStatus::PUBLISHED)
            ->sort('createdAt', 'DESC')
            ->limit($limit)
            ->getQuery()->execute()
        ;
    }

    /**
     * Count published elements from date
     *
     * @param DateTime $date
     *
     * @return int
     */
    public function countFromDate(DateTime $date)
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()
            ->field('status')->equals(PostStatus::PUBLISHED)
            ->field('createdAt')->gte($date)
            ->getQuery()->execute()->count()
            ;
    }

    /**
     * Count published elements with source
     *
     * @return integer
     */
    public function countPublishedWithSource()
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()
            ->field('status')->equals(PostStatus::PUBLISHED)
            ->field('source')->notEqual('')
            ->getQuery()->execute()->count()
            ;
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function getPublished($limit = 50)
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()
            ->field('status')->equals(PostStatus::PUBLISHED)
            ->limit($limit)
            ->sort('createdAt', 'DESC')
            ->getQuery()->execute()
            ;
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function getPrePublished($limit = 50)
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()
            ->field('status')->equals(PostStatus::PRE_PUBLISHED)
            ->limit($limit)
            ->sort('createdAt', 'DESC')
            ->getQuery()->execute()
            ;
    }

    /**
     * @return bool|mixed
     */
    public function getOneRandomPrePublished()
    {
        $items = $this->getPrePublished();
        if (!$items) {
            return false;
        }
        shuffle($items);

        return array_pop($items);
    }

    /**
     * @param string $query
     * @param int    $page
     * @param int    $perPage
     *
     * @return mixed
     */
    public function search($query, $page = 1, $perPage = 10)
    {
        $resultSet = new ArrayCollection();

        //-- runCommand
        $itemResultSet = $this->getDocumentManager()->getDocumentDatabase('Desarrolla2\Bundle\BlogBundle\Document\Post')->command([
            'text' => 'Post',
            'search' => $query,
            'limit' => $perPage,
            'skip' => $page * $perPage
        ])
        ;

        foreach ($itemResultSet['results'] as $itemResult) {
            $resultSet->add($this->uow->getOrCreateDocument('Desarrolla2\Bundle\BlogBundle\Document\Post', $itemResult['obj']));
        }

        return $resultSet;
    }

    /**
     * @return array
     */
    public function getArchiveItems()
    {
        $em = $this->getDocumentManager();
        /** @var \MongoCollection $results */
        $results = $em->createQueryBuilder()
            ->field('status')->equals(PostStatus::PUBLISHED)
            ->sort('createdAt', 'DESC')
            ->getQuery()->execute()
        ;

        $ag = $results->aggregate([
            ['$group' =>
                ['_id' =>
                    [
                        'month' => ['$month' => '$publishedAt'],
                        'year' => ['$year' => '$publishedAt']
                    ]
                ]
            ]
        ])
        ;

        return $ag['results'];
    }

    /**
     * Tokenize string for searching.
     * This should return all the numbers from
     *
     * @param string $query
     *
     * @return string[]
     */
    protected function tokenize($query)
    {
        preg_match_all('#\b\w{3,}\b#mi', $query, $matches);

        return is_array($matches) && count($matches)
            ? $matches[0]
            : array();
    }
}
