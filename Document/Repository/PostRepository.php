<?php

namespace Desarrolla2\Bundle\BlogBundle\Document\Repository;


use \Desarrolla2\Bundle\BlogBundle\Document\Post;
use \Desarrolla2\Bundle\BlogBundle\Document\Tag;
use Desarrolla2\Bundle\BlogBundle\Model\PostStatus;
use \DateTime;
use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ODM. Add your own custom
 * repository methods below.
 */
class PostRepository extends DocumentRepository
{

    const POST_PER_PAGE = 6;

    /**
     * @param array $ids
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGetByIds(array $ids)
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb->field('status')->equals(PostStatus::PUBLISHED);

        $or = [];

        foreach ($ids as $id) {
            $or[] = $qb->field('id')->equals($id);
        }

        $qb->addOr($or);

        return $qb;
    }

    /**
     * @param array $ids
     *
     * @return array
     */
    public function getByIds(array $ids)
    {
        if (!count($ids)) {
            return array();
        }

        return $this->getQueryForGetByIds($ids)
            ->getQuery()->execute()
            ;
    }

    /**
     *
     * @param string $slug
     *
     * @return \Desarrolla2\Bundle\BlogBundle\Document\Post
     */
    public function getOneBySlug($slug)
    {
        return $this->findOneBy(['slug' => $slug]);
    }

    /**
     *
     * @param \Desarrolla2\Bundle\BlogBundle\Document\Tag $tag
     * @param int                                       $limit
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getByTag(Tag $tag, $limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;
        $query = $this->getQueryForGetByTag($tag, $limit)
            ->limit($limit)
        ;

        return $query->getQuery()->execute();
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function get($limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;
        $query = $this->getQueryForGet($limit)
            ->limit($limit)
        ;

        return $query->getQuery()->execute();
    }

    /**
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGet()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->field('status')->equals(PostStatus::PUBLISHED);
        $qb->sort([
            'promotion' => 'DESC',
            'publishedAt' => 'DESC'
        ])
        ;

        return $qb;
    }

    /**
     *
     * @param string $slug
     *
     * @return array
     */
    public function getByTagSlug($slug = '')
    {
        $query = $this->getQueryForGetByTagSlug($slug);

        return $query->getQuery()->execute();
    }

    /**
     *
     * @param \Desarrolla2\Bundle\BlogBundle\Document\Tag $tag
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGetByTag(Tag $tag)
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->field('status')->equals(PostStatus::PUBLISHED);
        $qb->field('tags.slug')->equals($tag->getSlug());
        $qb->sort('publishedAt', 'DESC');

        return $qb;
    }

    /**
     *
     * @param string $slug
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGetByTagSlug($slug = '')
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb->field('status')->equals(PostStatus::PUBLISHED);
        $qb->field('tags.slug')->equals($slug);

        return $qb;
    }

    /**
     *
     * @param \Desarrolla2\Bundle\BlogBundle\Document\Post $post
     * @param int                                        $limit
     *
     * @return array
     */
    public function getLatestRelated(Post $post, $limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->field('status')->equals(PostStatus::PUBLISHED);
        $qb->sort('publishedAt', 'DESC');

        // TODO

            ' SELECT p FROM BlogBundle:Post p ' .
            ' JOIN p.tags t ' .
            ' JOIN t.posts p1 ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED .
            ' AND p1 = :post ' .
            ' AND p != :post ' .
            ' ORDER BY p.publishedAt DESC ';

            ->setParameter('post', $post)
            ->setMaxResults($limit);
        $related = $qb->getQuery()->execute();
        if (count($related)) {
            return $related;
        } else {
            return $this->getLatest($limit);
        }
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function getLatest($limit = self::POST_PER_PAGE)
    {
        $limit = (int) $limit;

        return $this->get($limit);
    }

    /**
     *
     * @return \Doctrine\ODM\QueryBuilder
     */
    public function getQueryBuilderForFilter()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb
            ->select('p')
            ->from('BlogBundle:Post', 'p')
            ->orderBy('p.createdAt', 'DESC');

        return $qb;
    }

    /**
     *
     * @return int
     */
    public function count()
    {
        $em = $this->getDocumentManager();
        $query = $em->createQuery(
            ' SELECT COUNT(p) FROM BlogBundle:Post p '
        );

        return $query->getSingleScalarResult();
    }

    /**
     *
     * @return int
     */
    public function countPublished()
    {
        $em = $this->getDocumentManager();
        $query = $em->createQuery(
            ' SELECT COUNT(p) FROM BlogBundle:Post p ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED
        );

        return $query->getSingleScalarResult();
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function getUnPublished($limit = 50)
    {
        $em = $this->getDocumentManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' WHERE p.status != ' . PostStatus::PUBLISHED .
            ' ORDER BY p.createdAt DESC '
        )
            ->setMaxResults($limit);

        return $query->getResult();
    }

    /**
     * Count published elements from date
     *
     * @param DateTime $date
     *
     * @return int
     */
    public function countFromDate(DateTime $date)
    {
        $em = $this->getDocumentManager();
        $query = $em->createQuery(
            ' SELECT COUNT(p) FROM BlogBundle:Post p ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED .
            ' AND p.createdAt >= :date '
        )
            ->setParameter('date', $date);

        return $query->getSingleScalarResult();
    }

    /**
     * Count published elements with source
     *
     * @return integer
     */
    public function countPublishedWithSource()
    {
        $em = $this->getDocumentManager();
        $query = $em->createQuery(
            ' SELECT COUNT(p) FROM BlogBundle:Post p ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED .
            ' AND p.source != :source '
        )
            ->setParameter('source', '');

        return $query->getSingleScalarResult();
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function getPublished($limit = 50)
    {
        $em = $this->getDocumentManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' WHERE p.status = ' . PostStatus::PUBLISHED .
            ' ORDER BY p.createdAt DESC '
        )
            ->setMaxResults($limit);

        return $query->getResult();
    }

    /**
     *
     * @param int $limit
     *
     * @return array
     */
    public function getPrePublished($limit = 50)
    {
        $em = $this->getDocumentManager();
        $query = $em->createQuery(
            ' SELECT p FROM BlogBundle:Post p ' .
            ' WHERE p.status = ' . PostStatus::PRE_PUBLISHED .
            ' ORDER BY p.createdAt DESC '
        )
            ->setMaxResults($limit);

        return $query->getResult();
    }

    /**
     * @return bool|mixed
     */
    public function getOneRandomPrePublished()
    {
        $items = $this->getPrePublished();
        if (!$items) {
            return false;
        }
        shuffle($items);

        return array_pop($items);
    }

    /**
     * @param string $query
     * @param int    $page
     * @param int    $perPage
     *
     * @return array|\Doctrine\ODM\QueryBuilder
     */
    public function getSearchBuilder($query, $page = 1, $perPage = 10)
    {
        $tokens = $this->tokenize($query);
        if (!count($tokens)) {
            return array();
        }

        $name = array();
        $intro = array();
        $content = array();

        $qb = $this->createQueryBuilder('p');
        $qb->where('p.status = 1');

        foreach ($tokens as $token) {
            $tkn = $qb->expr()->literal(sprintf('%%%s%%', $token));
            $name[] = $qb->expr()->like('p.name', $tkn);
            $intro[] = $qb->expr()->like('p.intro', $tkn);
            $content[] = $qb->expr()->like('p.content', $tkn);
        }

        if (count($name) === 1) {
            $qb->andWhere(
                $qb->expr()->orX(
                    call_user_func_array(array($qb->expr(), 'orX'), $name),
                    call_user_func_array(array($qb->expr(), 'orX'), $intro),
                    call_user_func_array(array($qb->expr(), 'orX'), $content)
                )
            );
        } else {
            $qb->andWhere(
                $qb->expr()->andX(
                    call_user_func_array(array($qb->expr(), 'orX'), $name),
                    call_user_func_array(array($qb->expr(), 'orX'), $intro),
                    call_user_func_array(array($qb->expr(), 'orX'), $content)
                )
            );
        }

        $start = ($page - 1) * $perPage;

        $qb->setFirstResult($start);
        $qb->setMaxResults($perPage);

        return $qb;
    }

    /**
     * @param string $query
     * @param int    $page
     * @param int    $perPage
     *
     * @return mixed
     */
    public function search($query, $page = 1, $perPage = 10)
    {
        return $this->getQueryForSearch($query, $page, $perPage)->getQuery()->getResult();
    }

    /**
     * @return array
     */
    public function getArchiveItems()
    {
        $query = $this->getDocumentManager()
            ->createQuery(
                ' SELECT COUNT(p) as n, ' .
                ' SUBSTRING(p.publishedAt, 1, 4) as year, ' .
                ' SUBSTRING(p.publishedAt, 6, 2) as month ' .
                ' FROM BlogBundle:Post p ' .
                ' WHERE p.status = ' . PostStatus::PUBLISHED .
                ' GROUP BY year, month ' .
                ' ORDER BY year DESC, month DESC '
            );
        $results = $query->getResult();
        $items = array();
        foreach ($results as $item) {
            if (!$item['year']) {
                continue;
            }
            if (!$item['month']) {
                continue;
            }
            if (!isset($items[$item['year']])) {
                $items[$item['year']] = array();
            }
            array_push(
                $items[$item['year']],
                array(
                    'n' => $item['n'],
                    'date' => new \DateTime($item['year'] . '-' . $item['month'] . '-01')
                )
            );
        }

        return $items;
    }

    /**
     * Tokenize string for searching.
     * This should return all the numbers from
     *
     * @param string $query
     *
     * @return string[]
     */
    protected function tokenize($query)
    {
        preg_match_all('#\b\w{3,}\b#mi', $query, $matches);

        return is_array($matches) && count($matches)
            ? $matches[0]
            : array();
    }
}
