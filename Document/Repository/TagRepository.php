<?php

namespace Desarrolla2\Bundle\BlogBundle\Document\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Desarrolla2\Bundle\BlogBundle\Document\Tag;
use Desarrolla2\Bundle\BlogBundle\Model\PostStatus;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ODM. Add your own custom
 * repository methods below.
 */
class TagRepository extends DocumentRepository
{
    const TAGS_PER_PAGE = 20;

    /**
     * @param  int   $limit
     * @return array
     */
    public function get($limit = self::TAGS_PER_PAGE)
    {
        $limit = (int) $limit;
        $query = $this->getQueryForGet($limit)
            ->limit($limit)
        ;

        return $query->getQuery()->execute();
    }

    /**
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGet()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->field('items')->gte('1');
        $qb->sort('items', 'DESC');

        return $qb;
    }

    /**
     * @param  int                        $limit
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryBuilderForGet($limit = self::TAGS_PER_PAGE)
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->sort('items', 'DESC');
        $qb->limit($limit);

        return $qb;
    }

    /**
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryBuilderForFilter()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb->sort('items', 'DESC');

        return $qb;
    }

    /**
     *
     * @param  \Desarrolla2\Bundle\BlogBundle\Document\Tag $t
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getCountItemsForTag(Tag $t)
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->field('posts.status')->equals(PostStatus::PUBLISHED);

        return $qb->getQuery()->execute()->conut();
    }

    /**
     *
     * @param  \Desarrolla2\Bundle\BlogBundle\Document\Tag $tag
     * @return integer
     */
    public function indexTagItemsForTag(Tag $tag)
    {
        $em = $this->getDocumentManager();
        $n = $this->getCountItemsForTag($tag);

        $tag->setItems($n);
        $em->persist($tag);
        $em->flush();
    }

    /**
     * Set total items for all tags
     */
    public function indexTagItems()
    {
        foreach ($this->findAll() as $tag) {
            $this->indexTagItemsForTag($tag);
        }
    }

    /**
     * @return mixed
     */
    public function count()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        return $qb->getQuery()->execute()->conut();
    }

    /**
     *
     * @param  string                                    $slug
     * @return \Desarrolla2\Bundle\BlogBundle\Document\Tag
     */
    public function getOneBySlug($slug)
    {
        return $this->findOneBy(['slug' => $slug]);
    }

    /**
     *
     * @param  string                                    $tagName
     * @return \Desarrolla2\Bundle\BlogBundle\Document\Tag
     */
    public function getOneByName($tagName)
    {
        return $this->findOneBy(['name' => $tagName]);
    }

    /**
     *
     * @param  string                                    $tagName
     * @return \Desarrolla2\Bundle\BlogBundle\Document\Tag
     */
    public function getOrCreateByName($tagName)
    {
        $em = $this->getDocumentManager();
        $tag = $this->getOneByName($tagName);
        if (!$tag) {
            $name = strtolower($tagName);
            $tag = new Tag();
            $tag->setName($name);
            $em->persist($tag);
            $em->flush();
        }

        return $tag;
    }
}
