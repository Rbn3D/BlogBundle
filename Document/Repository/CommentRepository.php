<?php

namespace Desarrolla2\Bundle\BlogBundle\Document\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Desarrolla2\Bundle\BlogBundle\Document\Post;
use Desarrolla2\Bundle\BlogBundle\Model\CommentStatus;
use DateTime;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ODM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends DocumentRepository
{

    const COMMENTS_PER_PAGE = 8;

    public function getQueryForGet()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb->addOr(
            [$qb->field('status')->equals(CommentStatus::PENDING)],
            [$qb->field('status')->equals(CommentStatus::APPROVED)]
        )
        ;
        $qb->sort('createdAt', 'DESC');

        return $qb;
    }

    /**
     *
     * @param  \Desarrolla2\Bundle\BlogBundle\Document\Post $post
     * @param  int                                        $limit
     * @return array
     */
    public function getLatestRelated(Post $post, $limit = self::COMMENTS_PER_PAGE)
    {
        $limit = (int) $limit;
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->addOr(
            [$qb->field('status')->equals(CommentStatus::PENDING)],
            [$qb->field('status')->equals(CommentStatus::APPROVED)]
        )
        ;
        $qb->field('post')->equals($post);
        $qb->sort('createdAt', 'DESC');
        $qb->limit($limit);

        $related = $qb->getQuery()->execute();

        if (count($related)) {
            return $related;
        } else {
            return $this->getLatest($limit);
        }
    }

    /**
     *
     * @param  int   $limit
     * @return array
     */
    public function getLatest($limit = self::COMMENTS_PER_PAGE)
    {
        $limit = (int) $limit;
        $query = $this->getQueryForGet($limit);
        $query->limit($limit);

        return $query->getQuery()->execute();
    }

    /**
     * @param  \Desarrolla2\Bundle\BlogBundle\Document\Post $post
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryForGetForPost(Post $post)
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();

        $qb->addOr(
            [$qb->field('status')->equals(CommentStatus::PENDING)],
            [$qb->field('status')->equals(CommentStatus::APPROVED)]
        )
        ;
        $qb->field('post')->equals($post);
        $qb->sort('createdAt', 'DESC');

        return $qb;
    }

    /**
     *
     * @param  \Desarrolla2\Bundle\BlogBundle\Document\Post $post
     * @return array
     */
    public function getForPost(Post $post)
    {
        $query = $this->getQueryForGetForPost($post);

        return $query->getQuery()->execute();
    }

    /**
     *
     * @return \Doctrine\ODM\MongoDB\Query\Builder
     */
    public function getQueryBuilderForFilter()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb->sort('createdAt', 'DESC');

        return $qb;
    }

    public function count()
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()->getQuery()->execute()->count();
    }

    public function countApproved()
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()
            ->field('status')->equals(CommentStatus::APPROVED)
            ->getQuery()->execute()->count()
            ;
    }

    /**
     *
     * @return \MongoCollection
     */
    public function getPending()
    {
        $em = $this->getDocumentManager();
        $qb = $em->createQueryBuilder();
        $qb->field('status')->equals(CommentStatus::PENDING);
        $qb->sort('createdAt', 'DESC');

        return $qb->getQuery()->execute();
    }

    /**
     * Delete entity from database
     *
     * @param int $id
     */
    public function delete($id)
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()->remove()->field('id', $id)->getQuery()->execute();
    }

    /**
     * Count published elements from date
     *
     * @param  DateTime $date
     * @return int
     */
    public function countFromDate(DateTime $date)
    {
        $em = $this->getDocumentManager();
        return $em->createQueryBuilder()
            ->field('status')->equals(CommentStatus::APPROVED)
            ->field('createdAt')->gte($date)
            ->getQuery()->execute()->count()
            ;
    }

}
